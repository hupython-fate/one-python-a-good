#第一个遗漏的是操作符之中的赋值运算符。

c=6
c=c+1
print(c)
#以上是传统写法。
#而使用赋值运算符则是：
j=2
j+=1#j+=1等价于j=j+1
#相当于把两个j和并，并把“+”提到“=”的前面。
print(j)#打印出来应为3.
'''
嗯，加法赋值为+=。
减法为-=。
乘法为*=。
除法为/=。
~~~~~~

赋值运算符的价值与运用的简化赋值操作。
'''


#第二个要查缺补漏的是四大数据结构之集合（set)
#python有四个数据结构，一是list(列表）,二是dict（字典）,三是tuple（元组）,四是set（集合).
#set用花括号{}，里面是不重复、无序的元素。
#比如，

di={555,999,65479,123654}
x=type(di)#这个type函数会返回类型。
print(x)
#以上这个是set(集合）.

#gggg=set(1,5,9)
#用set()创建集合不能容纳数字吗？那字符串呢？
gggg=set('159')#这样是正确的，但为什么不能在括号内放入多个元素？
#或许''内的多个数字就被视为多个元素呢？没错。就是这样。

#这也是一个集合，不仅可以用“变量名={集合元素}”的形式创建集合，还可以用set()函数。
#记住，如果要创建空集合，只能用set(),因为{}创建的是空字典。
sss=type(gggg)
print(sss)

deee={1:123456,2:789456123,3:5555555}
y=type(deee)
print(y)
#以上这个是字典。

kkk=[123,'hu','holle']
z=type(kkk)
print(z)
#以上这个是列表。

tuppp=(1,9,456,1000)
g=type(tuppp)
print(g)
#以上这个是元组。

#还有集合的运算，差、交、并、对称差三种运算。
#比如说，

print(di-gggg)#这是一个差集运算。#差集运算，即，在di中但不在gggg中的元素。
print(di|gggg)#这是一个并集运算。#并集运算，即，把di和gggg的所有元素加起来，去除重复的。
print(di&gggg)#这是一个交集运算。#交集运算，即，把即在di又在gggg的元素显出。
#这个交集运算的结果是空集，不用None表示，用set（）表示空集。
#对称差集运算是交集运算的逆运算。
print(di^gggg)#这就是一个对称差集运算。对称差集，即，不同时在di和gggg的元素。


#第三个要查缺补漏的是循环控制。
#之前我学了for循环和while循环，但是还没学循环控制（break,continue).
#今天太晚了，明天在续！